@
@ Stdlib
@

@ Stdlib | Built-ins
:NIL
:T:1=1
:F:~T
:is{ $\80 }
:weak{ $\81 }
:hash{ $\82 }
:time{ $\83 }
:in{ $\84 }
:out{ $\85 }
:pack{ $\86 }
:unpack{ $\87 }
:data{ $\88 }
:array{ $\89 }
:len{ $\8a }
:get{ $\8b }
:set{ $\8c }
:copy{ $\8d }
:load{ $\8e }
:save{ $\8f }
:fin{ $\90 }
:fout{ $\91 }
:b64{ $\92 }
:b64decode{ $\93 }

@ Stdlib | Misc Constants
:EMPTY_DATA:""
:EMPTY_ARRAY:array(0)

@ Stdlib | Characters
:NL:0a
:TAB:09
:SPACE:20
:EXCLAMATION_MARK:21
:QUOTATION_MARK:22
:DOLLAR_SIGN:24
:PERCENT_SIGN:25
:AMPERSAND:26
:APOSTROPHE:27
:PAREN_L:28
:PAREN_R:29
:ASTERISK:2a
:PLUS_SIGN:2b
:COMMA:2c
:HYPHEN:2d
:SLASH:2f
:COLON:3a
:SEMICOLON:3b
:LT_SIGN:3c
:EQ_SIGN:3d
:GT_SIGN:3e
:QUESTION_MARK:3f
:AT_SIGN:40
:BACKSLASH:5c
:CARET:5e
:CURLY_BRACE_L:7b
:VERTICAL_BAR:7c
:CURLY_BRACE_R:7d
:TILDA:7e

@ Stdlib | Results (ugly way to return multiple values)
:r0:NIL @ unused because it always gets returned on the stack
:r1:NIL
:r2:NIL
:result2(a,b){ :r1:b $a }
:result3(a,b,c){ :r1:b :r2:c $a }

@ Stdlib | Misc
:select(x,a,b){
  ?x{ $a }:{ $b }
}
:default(x,def){
  ?is(x,NIL){ $def }:{ $x }
}
:empty(x){
  $is(x,NIL)|(len(x)=0)
}
:assert(a){
  ?a{ $NIL }
  !"Assertion failed"
}

@ Stdlib | Integer
:fp(i,f){
  $(i*10000)+f
}
:int(x){
  $(x/10000)
}
:itod(x){
  ?x=0{ $"0" }
  :y:x
  :n:0
  ?y{
    :y:y/+a
    :n:n+1
  }^
  :d:data(n)
  :i:n-1
  ?x{
    set(d,i,(x%+a)+30)
    :x:x/+a
    :i:i-1
  }^
  $d
}
:min(a,b){
  ?b<a{ $b } $a
}
:max(a,b){
  ?b>a{ $b } $a
}
:clamp(x,l,h){
  $min(max(x,l),h)
}

@ Stdlib | Text
:pad(t,c,n){
  :padded:data(n+len(t))
  copy(padded,t,n,0,len(t))
  ?n>0{
    :n:n-1
    set(padded,n,c)
  }^
  $padded
}
:_build_char_map(char_map){
  :c:7f
  ?c>-1{
    set(char_map,c,set(data(1),0,c))
    :c:c-1
  }^
  $char_map
}
:_char_map:_build_char_map(array(80))
:char(x){
  $get(_char_map,x)
}
:digit(x){
  $get(_char_map,x+30)
}
:_hex_digits:"0123456789abcdef"
:hex_digit(x){
  $get(_hex_digits,x)
}
:parse_hex_digit(c){
  :x:c-61
  ?x<0{ $x+31 }
  $x+0a
}
:is_digit(x){
  $((x>2f)&(x<3a))
}
:is_digit_or_sign(x){
  $((x>2f)&(x<3a))|(x=PLUS_SIGN)|(x=HYPHEN)
}
:is_hex_digit(x){
  $((x>2f)&(x<3a))|((x>60)&(x<67))
}
:is_alpha(x){
  $((x>40)&(x<5b))|((x>60)&(x<7b))
}
:is_word(x){
  $((x>40)&(x<5b))|((x>60)&(x<7b))|((x>2f)&(x<3a))|(x=5f)
}

@ Stdlib | Data
:dchunk(d,i,n){
  $copy(data(n),d,0,i,n)
}
:dclone(d){
  $copy(data(len(d)),d,0,0,len(d))
}
:dresize(d,n){
  $copy(data(n),d,0,0,len(d))
}
:dconcat(a,b){
  :c:data(len(a)+len(b))
  copy(c,a,0,0,len(a))
  copy(c,b,len(a),0,len(b))
  $c
}
:join(delimiter,datas){
  :n:len(datas)
  :i:n-1
  ?i=0{ $EMPTY_DATA }
  :new_str_n:(i*len(delimiter))
  ?i>-1{
    :new_str_n:new_str_n+len(get(datas,i))
    :i:i-1
  }^
  :new_str:data(new_str_n)
  :old_str:get(datas,0)
  copy(new_str,old_str,0,0,len(old_str))
  :new_str_i:len(old_str) 
  :i:1
  ?i<n{
    :old_str:get(datas,i)
    copy(new_str,delimiter,new_str_i,0,len(delimiter))
    :new_str_i:new_str_i+len(delimiter)
    copy(new_str,old_str,new_str_i,0,len(old_str))
    :new_str_i:new_str_i+len(old_str)
    :i:i+1
  }^
  $new_str
}
:joinlines(a){
  $join(char(NL),a)
}

@ Stdlib | Array
:achunk(a,i,n){
  $copy(array(n),a,0,i,n)
}
:aclone(a){
  $copy(array(len(a)),a,0,0,len(a))
}
:aresize(a,n){
  $copy(array(n),a,0,0,len(a))
}
:aconcat(a,b){
  :c:array(len(a)+len(b))
  copy(c,a,0,0,len(a))
  copy(c,b,len(a),0,len(b))
  $c
}
:flatten(a){
  :n:len(a)
  :i:n-1
  ?i=0{ $EMPTY_ARRAY }
  :flattened_n:0
  ?i>-1{
    :flattened_n:flattened_n+len(get(a,i))
    :i:i-1
  }^
  :flattened:array(flattened_n)
  :flattened_i:0 
  :i:0
  ?i<n{
    :cur_array:get(a,i)
    copy(flattened,cur_array,flattened_i,0,len(cur_array))
    :flattened_i:flattened_i+len(cur_array)
    :i:i+1
  }^
  $flattened 
}
:_lookup_index(a,k){
  @ TODO: replace built-in hash() with this?
  :n:len(a)
  :i:hash(k)%n
  :j:i+n
  ?i<j{
    :x:get(a,i%n)
    ?x=NIL{
      $i%n
    }
    ?get(x,0)=k{
      $i%n
    }
    :i:i+1
  }^
  $-1 @ out of free slots
}
:put(a,k,v){
  :i:_lookup_index(a,k)
  :n:len(a)
  :x:get(a,i)
  ?x=NIL{
    set(a,i,(,k,v))
  }:{
    set(x,1,v)
  }
  $a
}
:lookup(a,k){
  :i:_lookup_index(a,k)
  ?i>-1{
    :x:get(a,i)
    ?~(x=NIL){
      $get(x,1)
    }
  }
  $NIL
}
:count_kvs(a){
  :c:0
  :i:0
  :n:len(a)
  ?i<n{
    ?get(a,i)=NIL{
      :c:c+1
    }
    :i:i+1
  }^
  $n-c
}

@ Stdlib | Data/Array
:assign(a,b){
  $copy(a,b,0,0,len(a))
}
:fill(a,i,j,x){
  :n:0
  ?i<j{
    set(a,i,x)
    :i:i+1
  }^
  $a
}
:sum(a,i,j){
  :x:0
  ?i<j{
    :x:x+get(a,i)
    :i:i+1
  }^
  $x
}
:count(a,i,j,x){
  :n:0
  ?i<j{
    ?get(a,i)=x{
      :n:n+1
    }
    :i:i+1
  }^
  $n
}
:find(a,i,j,x){
  ?i<j{
    ?get(a,i)=x{
      $i
    }
    :i:i+1
  }^
  $-1
}
:find_reverse(a,i,j,x){
  ?j>i{
    :j:j-1
    ?get(a,j)=x{
      $j
    }
  }^
  $-1
}

@ Stdlib | Vector
:Vector_v(vec){ $get(vec,0) }
:Vector_n(vec){ $get(vec,1) }
:Vector_set_v(vec,v){ $set(vec,0,v) }
:Vector_set_n(vec,n){ $set(vec,1,n) }
:Vector_capacity(vec){ $len(get(vec,0)) }
:Vector_set_capacity(vec,capacity){
  $set(vec,0,aresize(get(vec,0),capacity))
}
:Vector_get(vec,i){
  $get(get(vec,0),i)
}
:Vector_set(vec,i,x){
  set(get(vec,0),i,x)
  $vec
}
:Vector_last(vec){
  $Vector_get(vec,Vector_n(vec)-1)
}
:Vector_pop(vec){
  :i:Vector_n(vec)-1
  :x:Vector_get(vec,i)
  Vector_set_n(vec,i)
  $x
}
:Vector_resize(vec,n){
  ?~(n<Vector_capacity(vec)){
    :capacity:1
    ?capacity<n{
      :capacity:capacity*2
    }^
    Vector_set_capacity(vec,capacity)
  }
  Vector_set_n(vec,n)
  $vec
}
:Vector_append(vec,x){
  :v:Vector_v(vec)
  :i:Vector_n(vec)
  Vector_resize(vec,i+1)
  Vector_set(vec,i,x)
  $vec
}
:Vector_init(vec,capacity){
  Vector_set_v(vec,array(capacity))
  Vector_set_n(vec,0)
  $vec
}
:Vector(capacity){
  $Vector_init(array(2),capacity)
}

@ logical ops
assert(1)
assert(-1)
assert(~0)
@ assert(~~~0) @ no longer supported because why?
assert(~(0&0))
assert(~(0&1))
assert(~(1&0))
assert(1&1)
assert(~(0|0))
assert(0|1)
assert(1|0)
assert(1|1)
assert((0^0)=0)
assert(1^0)
assert(0^1)
assert((1^1)=0)

@ comparison ops
assert(0=0)
assert(1=1)
assert((~-1)=0)
assert(~(0=1))
assert(~(1=0))
assert(0=0)
assert(1>0)
assert(~(0>1))
assert(~(1<0))
assert(0<1)

@ numbers
assert(100=100)
assert(~(-69=69))
assert(+34)

@ boolean globals
assert(T)
assert(~F)
assert(~T=F)
assert(T=~F)
assert(~(T=F))
assert(T=T)
assert(F=F)

@ math ops
assert(1+1=2)
assert(2-1=1)
assert(2*2=4)
assert(-45=(45*-1))
assert(4/2=2)
assert(5%2=1)

@ order of operations
@ assert(1<0|2<3)
@ assert(~(1<0&2<3))
@ assert(~(1<0+2&2+(2/2)<3))

@ variable ops
:a:0
:b:1
assert(a=0)
assert(~(a=1))
assert(~(b=0))
assert(b=1)

@ control statements
?0{ assert(0) }:{ assert(1) }
?1{ assert(1) }:{ assert(0) }
?0{
  assert(0)
}:?0{
  assert(0)
}:?1{
  assert(1)
}:{
  assert(0)
}
?0{
  assert(0)
}:?0{
  assert(0)
}:?0{
  assert(0)
}:{
  assert(1)
}

@ functions
:c{ $1 }
:d{ $0 }
:D(){ $d() }
:e(a){ $a|10 }
:g{ assert(1) $1 }
:a_global:-1
:set_global(){ :a_global:789 $NIL }
assert(c())
assert(~d())
assert(e(c())=11)
assert(g())
set_global()
assert(a_global=789)

@ try
?{
  ?{
    !55  @ throw
    assert(0)
  }:{
    :ef! @ catch (don't forget this!)
  }
  assert(ef=55)
}:{
  assert(0)
}
assert(ef=55)

@ looping
:i:0
?i<9{
  :i:i+1
  out(i)
}^

@ strings
:test_str:"a test string"
out("hello")
out("world")

@ array
:x:100
:test_array:,3,4,5,x
:dynamic_test_array:array(4)

@ test stdlib
assert(is(0,0))
assert(is(test_str,test_str))
:test_str_clone:"a test string"
assert(~is(test_str,test_str_clone))
assert(is(weak(test_str),test_str))
assert(min(100,50)=50)
assert(max(100,50)=100)
assert(clamp(2,1,3)=2)
assert(clamp(4,1,3)=3)
assert(clamp(0,1,3)=1)
:some_data_expected:"dynamic"
:some_data:data(7)
assert(len(some_data)=7)
set(some_data,0,64)
set(some_data,1,79)
set(some_data,2,6e)
set(some_data,3,61)
set(some_data,4,6d)
set(some_data,5,69)
set(some_data,6,63)
assert(get(some_data,0)=64)
assert(get(some_data,6)=63)
out(some_data)
:some_data_copy:data(7)
assert(copy(some_data_copy,some_data,0,0,7)=some_data)
assert(copy(some_data_copy,some_data,0,0,7)=some_data)

assert(get(char(+a),0)=+a)
assert(itod(+2aaa)="10922")
assert(itod(0)="0")
assert(dchunk("foobar",2,3)="oba")
assert(join("***",(,"a","B","c"))="a***B***c")
assert(sum((,1,2,3),0,3)=6)
assert(select(F,1,0)=0)
assert(select(T,1,0)=1)
assert(default(0,9)=0)
assert(default(1,9)=1)
assert(default(NIL,9)=9)
assert(flatten(,(,0),(,1,2,3),(,4,5,6,7,8,9))=(,0,1,2,3,4,5,6,7,8,9))

:test_map:array(3)
put(test_map,"b",2)
put(test_map,"a",1)
put(test_map,"c",3)
assert(lookup(test_map,"a")=1)
assert(lookup(test_map,"b")=2)
assert(lookup(test_map,"c")=3)
put(test_map,"c",4)
assert(lookup(test_map,"c")=4)

:sparse_test_map:array(100)
put(sparse_test_map,"b",2)
put(sparse_test_map,"a",1)
put(sparse_test_map,"c",3)
assert(lookup(sparse_test_map,"a")=1)
assert(lookup(sparse_test_map,"b")=2)
assert(lookup(sparse_test_map,"c")=3)
assert(count_kvs(sparse_test_map)=3)
put(sparse_test_map,"d",100)
assert(count_kvs(sparse_test_map)=4)

assert(load(save("test","save worked!"))="save worked!")

assert(`test.txt`="helloworld")

@ assert(match(char(7e),"~"))
@ assert(sfirst("abc",0,"a")=0)
@ assert(sfirst("abc",0,"b")=1)
@ assert(sfirst("abc",0,"c")=2)
@ assert(sfirst("abc",0,"d")=-1)
@ assert(match(digit(0),"0"))
@ assert(match(digit(1),"1"))
@ assert(match(digit(9),"9"))

out(char(NL))
out("123456789helloworlddynamic <- EXPECTED")
out(char(NL))
